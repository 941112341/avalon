// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package test

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/941112341/avalon/common/gen/base"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
// Attributes:
//  - Age
//  - Name
//  - Babies
type Cat struct {
  Age int32 `thrift:"age,1,required" db:"age" json:"age"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  Babies []*LittleCat `thrift:"babies,3" db:"babies" json:"babies"`
}

func NewCat() *Cat {
  return &Cat{}
}


func (p *Cat) GetAge() int32 {
  return p.Age
}
var Cat_Name_DEFAULT string
func (p *Cat) GetName() string {
  if !p.IsSetName() {
    return Cat_Name_DEFAULT
  }
return *p.Name
}

func (p *Cat) GetBabies() []*LittleCat {
  return p.Babies
}
func (p *Cat) IsSetName() bool {
  return p.Name != nil
}

func (p *Cat) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetAge bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetAge = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetAge{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Age is not set"));
  }
  return nil
}

func (p *Cat)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Age = v
}
  return nil
}

func (p *Cat)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *Cat)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LittleCat, 0, size)
  p.Babies =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &LittleCat{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Babies = append(p.Babies, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Cat) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Cat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Cat) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("age", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:age: ", p), err) }
  if err := oprot.WriteI32(int32(p.Age)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.age (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:age: ", p), err) }
  return err
}

func (p *Cat) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *Cat) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("babies", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:babies: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Babies)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Babies {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:babies: ", p), err) }
  return err
}

func (p *Cat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Cat(%+v)", *p)
}

// Attributes:
//  - Cat
//  - Age
//  - Color
//  - Ids
type LittleCat struct {
  Cat *Cat `thrift:"cat,1" db:"cat" json:"cat"`
  Age int32 `thrift:"age,2" db:"age" json:"age"`
  Color int8 `thrift:"color,3" db:"color" json:"color"`
  Ids map[int64][]*Foo `thrift:"ids,4" db:"ids" json:"ids"`
}

func NewLittleCat() *LittleCat {
  return &LittleCat{}
}

var LittleCat_Cat_DEFAULT *Cat
func (p *LittleCat) GetCat() *Cat {
  if !p.IsSetCat() {
    return LittleCat_Cat_DEFAULT
  }
return p.Cat
}

func (p *LittleCat) GetAge() int32 {
  return p.Age
}

func (p *LittleCat) GetColor() int8 {
  return p.Color
}

func (p *LittleCat) GetIds() map[int64][]*Foo {
  return p.Ids
}
func (p *LittleCat) IsSetCat() bool {
  return p.Cat != nil
}

func (p *LittleCat) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LittleCat)  ReadField1(iprot thrift.TProtocol) error {
  p.Cat = &Cat{}
  if err := p.Cat.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cat), err)
  }
  return nil
}

func (p *LittleCat)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Age = v
}
  return nil
}

func (p *LittleCat)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Color = temp
}
  return nil
}

func (p *LittleCat)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64][]*Foo, size)
  p.Ids =  tMap
  for i := 0; i < size; i ++ {
var _key1 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*Foo, 0, size)
    _val2 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem3 := &Foo{}
      if err := _elem3.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
      }
      _val2 = append(_val2, _elem3)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Ids[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *LittleCat) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LittleCat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LittleCat) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cat", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cat: ", p), err) }
  if err := p.Cat.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cat), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cat: ", p), err) }
  return err
}

func (p *LittleCat) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("age", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:age: ", p), err) }
  if err := oprot.WriteI32(int32(p.Age)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.age (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:age: ", p), err) }
  return err
}

func (p *LittleCat) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("color", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:color: ", p), err) }
  if err := oprot.WriteByte(int8(p.Color)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.color (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:color: ", p), err) }
  return err
}

func (p *LittleCat) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ids", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ids: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Ids {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ids: ", p), err) }
  return err
}

func (p *LittleCat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LittleCat(%+v)", *p)
}

// Attributes:
//  - ID
//  - Base
type CatRequest struct {
  ID []int64 `thrift:"id,1" db:"id" json:"id"`
  // unused fields # 2 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewCatRequest() *CatRequest {
  return &CatRequest{}
}


func (p *CatRequest) GetID() []int64 {
  return p.ID
}
var CatRequest_Base_DEFAULT *base.Base
func (p *CatRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return CatRequest_Base_DEFAULT
  }
return p.Base
}
func (p *CatRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *CatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CatRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.ID =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.ID = append(p.ID, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CatRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *CatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CatRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.ID)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ID {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *CatRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *CatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CatRequest(%+v)", *p)
}

// Attributes:
//  - Cats
//  - BaseResp
type CatResponse struct {
  Cats map[int64]*Cat `thrift:"cats,1" db:"cats" json:"cats"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"baseResp,255" db:"baseResp" json:"baseResp"`
}

func NewCatResponse() *CatResponse {
  return &CatResponse{}
}


func (p *CatResponse) GetCats() map[int64]*Cat {
  return p.Cats
}
var CatResponse_BaseResp_DEFAULT *base.BaseResp
func (p *CatResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return CatResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *CatResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *CatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CatResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]*Cat, size)
  p.Cats =  tMap
  for i := 0; i < size; i ++ {
var _key5 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
    _val6 := &Cat{}
    if err := _val6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val6), err)
    }
    p.Cats[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CatResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *CatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CatResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cats", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cats: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.Cats)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Cats {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cats: ", p), err) }
  return err
}

func (p *CatResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:baseResp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:baseResp: ", p), err) }
  return err
}

func (p *CatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CatResponse(%+v)", *p)
}

// Attributes:
//  - Love
type Foo struct {
  Love bool `thrift:"love,1" db:"love" json:"love"`
}

func NewFoo() *Foo {
  return &Foo{}
}


func (p *Foo) GetLove() bool {
  return p.Love
}
func (p *Foo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Foo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Love = v
}
  return nil
}

func (p *Foo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Foo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Foo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("love", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:love: ", p), err) }
  if err := oprot.WriteBool(bool(p.Love)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.love (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:love: ", p), err) }
  return err
}

func (p *Foo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Foo(%+v)", *p)
}

// Attributes:
//  - Cat
//  - Base
type LittleCatRequest struct {
  Cat *Cat `thrift:"cat,1" db:"cat" json:"cat,omitempty"`
  // unused fields # 2 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewLittleCatRequest() *LittleCatRequest {
  return &LittleCatRequest{}
}

var LittleCatRequest_Cat_DEFAULT *Cat
func (p *LittleCatRequest) GetCat() *Cat {
  if !p.IsSetCat() {
    return LittleCatRequest_Cat_DEFAULT
  }
return p.Cat
}
var LittleCatRequest_Base_DEFAULT *base.Base
func (p *LittleCatRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return LittleCatRequest_Base_DEFAULT
  }
return p.Base
}
func (p *LittleCatRequest) IsSetCat() bool {
  return p.Cat != nil
}

func (p *LittleCatRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *LittleCatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LittleCatRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.Cat = &Cat{}
  if err := p.Cat.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cat), err)
  }
  return nil
}

func (p *LittleCatRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *LittleCatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LittleCatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LittleCatRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCat() {
    if err := oprot.WriteFieldBegin("cat", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cat: ", p), err) }
    if err := p.Cat.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cat), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cat: ", p), err) }
  }
  return err
}

func (p *LittleCatRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *LittleCatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LittleCatRequest(%+v)", *p)
}

// Attributes:
//  - LittleCat
//  - BaseResp
type LittleCatResponse struct {
  LittleCat []*LittleCat `thrift:"littleCat,1" db:"littleCat" json:"littleCat,omitempty"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"baseResp,255" db:"baseResp" json:"baseResp"`
}

func NewLittleCatResponse() *LittleCatResponse {
  return &LittleCatResponse{}
}

var LittleCatResponse_LittleCat_DEFAULT []*LittleCat

func (p *LittleCatResponse) GetLittleCat() []*LittleCat {
  return p.LittleCat
}
var LittleCatResponse_BaseResp_DEFAULT *base.BaseResp
func (p *LittleCatResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return LittleCatResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *LittleCatResponse) IsSetLittleCat() bool {
  return p.LittleCat != nil
}

func (p *LittleCatResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *LittleCatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LittleCatResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LittleCat, 0, size)
  p.LittleCat =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &LittleCat{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.LittleCat = append(p.LittleCat, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LittleCatResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *LittleCatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LittleCatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LittleCatResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetLittleCat() {
    if err := oprot.WriteFieldBegin("littleCat", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:littleCat: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LittleCat)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LittleCat {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:littleCat: ", p), err) }
  }
  return err
}

func (p *LittleCatResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:baseResp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:baseResp: ", p), err) }
  return err
}

func (p *LittleCatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LittleCatResponse(%+v)", *p)
}

type CatService interface {
  // Parameters:
  //  - Request
  GetCat(ctx context.Context, request *CatRequest) (r *CatResponse, err error)
  // Parameters:
  //  - Request
  GetLittleCat(ctx context.Context, request *LittleCatRequest) (r *LittleCatResponse, err error)
}

type CatServiceClient struct {
  c thrift.TClient
}

func NewCatServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CatServiceClient {
  return &CatServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCatServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CatServiceClient {
  return &CatServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCatServiceClient(c thrift.TClient) *CatServiceClient {
  return &CatServiceClient{
    c: c,
  }
}

func (p *CatServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Request
func (p *CatServiceClient) GetCat(ctx context.Context, request *CatRequest) (r *CatResponse, err error) {
  var _args8 CatServiceGetCatArgs
  _args8.Request = request
  var _result9 CatServiceGetCatResult
  if err = p.Client_().Call(ctx, "GetCat", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *CatServiceClient) GetLittleCat(ctx context.Context, request *LittleCatRequest) (r *LittleCatResponse, err error) {
  var _args10 CatServiceGetLittleCatArgs
  _args10.Request = request
  var _result11 CatServiceGetLittleCatResult
  if err = p.Client_().Call(ctx, "GetLittleCat", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type CatServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CatService
}

func (p *CatServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CatServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CatServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCatServiceProcessor(handler CatService) *CatServiceProcessor {

  self12 := &CatServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["GetCat"] = &catServiceProcessorGetCat{handler:handler}
  self12.processorMap["GetLittleCat"] = &catServiceProcessorGetLittleCat{handler:handler}
return self12
}

func (p *CatServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type catServiceProcessorGetCat struct {
  handler CatService
}

func (p *catServiceProcessorGetCat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CatServiceGetCatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetCat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CatServiceGetCatResult{}
var retval *CatResponse
  var err2 error
  if retval, err2 = p.handler.GetCat(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCat: " + err2.Error())
    oprot.WriteMessageBegin("GetCat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetCat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type catServiceProcessorGetLittleCat struct {
  handler CatService
}

func (p *catServiceProcessorGetLittleCat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CatServiceGetLittleCatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetLittleCat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CatServiceGetLittleCatResult{}
var retval *LittleCatResponse
  var err2 error
  if retval, err2 = p.handler.GetLittleCat(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLittleCat: " + err2.Error())
    oprot.WriteMessageBegin("GetLittleCat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetLittleCat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type CatServiceGetCatArgs struct {
  Request *CatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewCatServiceGetCatArgs() *CatServiceGetCatArgs {
  return &CatServiceGetCatArgs{}
}

var CatServiceGetCatArgs_Request_DEFAULT *CatRequest
func (p *CatServiceGetCatArgs) GetRequest() *CatRequest {
  if !p.IsSetRequest() {
    return CatServiceGetCatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *CatServiceGetCatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *CatServiceGetCatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CatServiceGetCatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CatRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *CatServiceGetCatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CatServiceGetCatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *CatServiceGetCatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CatServiceGetCatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CatServiceGetCatResult struct {
  Success *CatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCatServiceGetCatResult() *CatServiceGetCatResult {
  return &CatServiceGetCatResult{}
}

var CatServiceGetCatResult_Success_DEFAULT *CatResponse
func (p *CatServiceGetCatResult) GetSuccess() *CatResponse {
  if !p.IsSetSuccess() {
    return CatServiceGetCatResult_Success_DEFAULT
  }
return p.Success
}
func (p *CatServiceGetCatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CatServiceGetCatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CatServiceGetCatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CatServiceGetCatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CatServiceGetCatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CatServiceGetCatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CatServiceGetCatResult(%+v)", *p)
}

// Attributes:
//  - Request
type CatServiceGetLittleCatArgs struct {
  Request *LittleCatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewCatServiceGetLittleCatArgs() *CatServiceGetLittleCatArgs {
  return &CatServiceGetLittleCatArgs{}
}

var CatServiceGetLittleCatArgs_Request_DEFAULT *LittleCatRequest
func (p *CatServiceGetLittleCatArgs) GetRequest() *LittleCatRequest {
  if !p.IsSetRequest() {
    return CatServiceGetLittleCatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *CatServiceGetLittleCatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *CatServiceGetLittleCatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CatServiceGetLittleCatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &LittleCatRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *CatServiceGetLittleCatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetLittleCat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CatServiceGetLittleCatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *CatServiceGetLittleCatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CatServiceGetLittleCatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CatServiceGetLittleCatResult struct {
  Success *LittleCatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCatServiceGetLittleCatResult() *CatServiceGetLittleCatResult {
  return &CatServiceGetLittleCatResult{}
}

var CatServiceGetLittleCatResult_Success_DEFAULT *LittleCatResponse
func (p *CatServiceGetLittleCatResult) GetSuccess() *LittleCatResponse {
  if !p.IsSetSuccess() {
    return CatServiceGetLittleCatResult_Success_DEFAULT
  }
return p.Success
}
func (p *CatServiceGetLittleCatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CatServiceGetLittleCatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CatServiceGetLittleCatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LittleCatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CatServiceGetLittleCatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetLittleCat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CatServiceGetLittleCatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CatServiceGetLittleCatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CatServiceGetLittleCatResult(%+v)", *p)
}


