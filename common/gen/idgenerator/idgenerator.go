// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package idgenerator

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/941112341/avalon/common/gen/base"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
// Attributes:
//  - Count
//  - Base
type IDRequest struct {
  Count int32 `thrift:"count,1" db:"count" json:"count"`
  // unused fields # 2 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewIDRequest() *IDRequest {
  return &IDRequest{}
}


func (p *IDRequest) GetCount() int32 {
  return p.Count
}
var IDRequest_Base_DEFAULT *base.Base
func (p *IDRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return IDRequest_Base_DEFAULT
  }
return p.Base
}
func (p *IDRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *IDRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *IDRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *IDRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IDRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:count: ", p), err) }
  return err
}

func (p *IDRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *IDRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDRequest(%+v)", *p)
}

// Attributes:
//  - IDs
//  - BaseResp
type IDResponse struct {
  IDs []int64 `thrift:"IDs,1" db:"IDs" json:"IDs"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"baseResp,255" db:"baseResp" json:"baseResp"`
}

func NewIDResponse() *IDResponse {
  return &IDResponse{}
}


func (p *IDResponse) GetIDs() []int64 {
  return p.IDs
}
var IDResponse_BaseResp_DEFAULT *base.BaseResp
func (p *IDResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return IDResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *IDResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *IDResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.IDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.IDs = append(p.IDs, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *IDResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *IDResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IDResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("IDs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:IDs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.IDs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.IDs {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:IDs: ", p), err) }
  return err
}

func (p *IDResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:baseResp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:baseResp: ", p), err) }
  return err
}

func (p *IDResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDResponse(%+v)", *p)
}

type IDGenerator interface {
  // Parameters:
  //  - Request
  GenIDs(ctx context.Context, request *IDRequest) (r *IDResponse, err error)
}

type IDGeneratorClient struct {
  c thrift.TClient
}

func NewIDGeneratorClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IDGeneratorClient {
  return &IDGeneratorClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewIDGeneratorClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IDGeneratorClient {
  return &IDGeneratorClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIDGeneratorClient(c thrift.TClient) *IDGeneratorClient {
  return &IDGeneratorClient{
    c: c,
  }
}

func (p *IDGeneratorClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Request
func (p *IDGeneratorClient) GenIDs(ctx context.Context, request *IDRequest) (r *IDResponse, err error) {
  var _args1 IDGeneratorGenIDsArgs
  _args1.Request = request
  var _result2 IDGeneratorGenIDsResult
  if err = p.Client_().Call(ctx, "GenIDs", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

type IDGeneratorProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler IDGenerator
}

func (p *IDGeneratorProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IDGeneratorProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IDGeneratorProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIDGeneratorProcessor(handler IDGenerator) *IDGeneratorProcessor {

  self3 := &IDGeneratorProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["GenIDs"] = &iDGeneratorProcessorGenIDs{handler:handler}
return self3
}

func (p *IDGeneratorProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x4

}

type iDGeneratorProcessorGenIDs struct {
  handler IDGenerator
}

func (p *iDGeneratorProcessorGenIDs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IDGeneratorGenIDsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GenIDs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IDGeneratorGenIDsResult{}
var retval *IDResponse
  var err2 error
  if retval, err2 = p.handler.GenIDs(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenIDs: " + err2.Error())
    oprot.WriteMessageBegin("GenIDs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GenIDs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type IDGeneratorGenIDsArgs struct {
  Request *IDRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewIDGeneratorGenIDsArgs() *IDGeneratorGenIDsArgs {
  return &IDGeneratorGenIDsArgs{}
}

var IDGeneratorGenIDsArgs_Request_DEFAULT *IDRequest
func (p *IDGeneratorGenIDsArgs) GetRequest() *IDRequest {
  if !p.IsSetRequest() {
    return IDGeneratorGenIDsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *IDGeneratorGenIDsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *IDGeneratorGenIDsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDGeneratorGenIDsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &IDRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *IDGeneratorGenIDsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenIDs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDGeneratorGenIDsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *IDGeneratorGenIDsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDGeneratorGenIDsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IDGeneratorGenIDsResult struct {
  Success *IDResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIDGeneratorGenIDsResult() *IDGeneratorGenIDsResult {
  return &IDGeneratorGenIDsResult{}
}

var IDGeneratorGenIDsResult_Success_DEFAULT *IDResponse
func (p *IDGeneratorGenIDsResult) GetSuccess() *IDResponse {
  if !p.IsSetSuccess() {
    return IDGeneratorGenIDsResult_Success_DEFAULT
  }
return p.Success
}
func (p *IDGeneratorGenIDsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IDGeneratorGenIDsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IDGeneratorGenIDsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &IDResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IDGeneratorGenIDsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenIDs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IDGeneratorGenIDsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IDGeneratorGenIDsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IDGeneratorGenIDsResult(%+v)", *p)
}


