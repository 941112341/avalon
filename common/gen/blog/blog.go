// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package blog

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/941112341/avalon/common/gen/base"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
// Attributes:
//  - ID
//  - ImageURL
//  - Content
//  - Categories
//  - Name
//  - Description
type Blog struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  ImageURL string `thrift:"imageURL,2" db:"imageURL" json:"imageURL"`
  Content string `thrift:"content,3" db:"content" json:"content"`
  Categories []string `thrift:"categories,4" db:"categories" json:"categories"`
  Name string `thrift:"name,5" db:"name" json:"name"`
  Description string `thrift:"description,6" db:"description" json:"description"`
}

func NewBlog() *Blog {
  return &Blog{}
}


func (p *Blog) GetID() string {
  return p.ID
}

func (p *Blog) GetImageURL() string {
  return p.ImageURL
}

func (p *Blog) GetContent() string {
  return p.Content
}

func (p *Blog) GetCategories() []string {
  return p.Categories
}

func (p *Blog) GetName() string {
  return p.Name
}

func (p *Blog) GetDescription() string {
  return p.Description
}
func (p *Blog) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Blog)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Blog)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ImageURL = v
}
  return nil
}

func (p *Blog)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *Blog)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Categories =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Categories = append(p.Categories, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Blog)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Blog)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *Blog) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Blog"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Blog) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Blog) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageURL", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imageURL: ", p), err) }
  if err := oprot.WriteString(string(p.ImageURL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageURL (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imageURL: ", p), err) }
  return err
}

func (p *Blog) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:content: ", p), err) }
  return err
}

func (p *Blog) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("categories", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:categories: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Categories)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Categories {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:categories: ", p), err) }
  return err
}

func (p *Blog) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:name: ", p), err) }
  return err
}

func (p *Blog) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:description: ", p), err) }
  return err
}

func (p *Blog) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Blog(%+v)", *p)
}

// Attributes:
//  - ID
//  - Base
type GetBlogRequest struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  // unused fields # 2 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewGetBlogRequest() *GetBlogRequest {
  return &GetBlogRequest{}
}


func (p *GetBlogRequest) GetID() string {
  return p.ID
}
var GetBlogRequest_Base_DEFAULT *base.Base
func (p *GetBlogRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return GetBlogRequest_Base_DEFAULT
  }
return p.Base
}
func (p *GetBlogRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *GetBlogRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetBlogRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *GetBlogRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *GetBlogRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlogRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetBlogRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *GetBlogRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *GetBlogRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetBlogRequest(%+v)", *p)
}

// Attributes:
//  - Blog
//  - BaseResp
type GetBlogResponse struct {
  Blog *Blog `thrift:"blog,1" db:"blog" json:"blog,omitempty"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"baseResp,255" db:"baseResp" json:"baseResp"`
}

func NewGetBlogResponse() *GetBlogResponse {
  return &GetBlogResponse{}
}

var GetBlogResponse_Blog_DEFAULT *Blog
func (p *GetBlogResponse) GetBlog() *Blog {
  if !p.IsSetBlog() {
    return GetBlogResponse_Blog_DEFAULT
  }
return p.Blog
}
var GetBlogResponse_BaseResp_DEFAULT *base.BaseResp
func (p *GetBlogResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return GetBlogResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *GetBlogResponse) IsSetBlog() bool {
  return p.Blog != nil
}

func (p *GetBlogResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *GetBlogResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetBlogResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Blog = &Blog{}
  if err := p.Blog.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Blog), err)
  }
  return nil
}

func (p *GetBlogResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *GetBlogResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlogResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetBlogResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetBlog() {
    if err := oprot.WriteFieldBegin("blog", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blog: ", p), err) }
    if err := p.Blog.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Blog), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blog: ", p), err) }
  }
  return err
}

func (p *GetBlogResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:baseResp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:baseResp: ", p), err) }
  return err
}

func (p *GetBlogResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetBlogResponse(%+v)", *p)
}

// Attributes:
//  - Keyword
//  - Page
//  - Size
//  - Base
type ListBlogsRequest struct {
  Keyword string `thrift:"keyword,1" db:"keyword" json:"keyword"`
  Page int32 `thrift:"page,2" db:"page" json:"page"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  // unused fields # 4 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewListBlogsRequest() *ListBlogsRequest {
  return &ListBlogsRequest{}
}


func (p *ListBlogsRequest) GetKeyword() string {
  return p.Keyword
}

func (p *ListBlogsRequest) GetPage() int32 {
  return p.Page
}

func (p *ListBlogsRequest) GetSize() int32 {
  return p.Size
}
var ListBlogsRequest_Base_DEFAULT *base.Base
func (p *ListBlogsRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return ListBlogsRequest_Base_DEFAULT
  }
return p.Base
}
func (p *ListBlogsRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *ListBlogsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListBlogsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Keyword = v
}
  return nil
}

func (p *ListBlogsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *ListBlogsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *ListBlogsRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *ListBlogsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListBlogsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListBlogsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyword", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyword: ", p), err) }
  if err := oprot.WriteString(string(p.Keyword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyword (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyword: ", p), err) }
  return err
}

func (p *ListBlogsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:page: ", p), err) }
  return err
}

func (p *ListBlogsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *ListBlogsRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *ListBlogsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListBlogsRequest(%+v)", *p)
}

// Attributes:
//  - Blogs
//  - BaseResp
type ListBlogsResponse struct {
  Blogs []*Blog `thrift:"blogs,1" db:"blogs" json:"blogs"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"baseResp,255" db:"baseResp" json:"baseResp"`
}

func NewListBlogsResponse() *ListBlogsResponse {
  return &ListBlogsResponse{}
}


func (p *ListBlogsResponse) GetBlogs() []*Blog {
  return p.Blogs
}
var ListBlogsResponse_BaseResp_DEFAULT *base.BaseResp
func (p *ListBlogsResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return ListBlogsResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *ListBlogsResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *ListBlogsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListBlogsResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Blog, 0, size)
  p.Blogs =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &Blog{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Blogs = append(p.Blogs, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListBlogsResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *ListBlogsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListBlogsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListBlogsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blogs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blogs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Blogs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Blogs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blogs: ", p), err) }
  return err
}

func (p *ListBlogsResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:baseResp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:baseResp: ", p), err) }
  return err
}

func (p *ListBlogsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListBlogsResponse(%+v)", *p)
}

// Attributes:
//  - ID
//  - Content
//  - Base
type SaveBlogRequest struct {
  ID *string `thrift:"id,1" db:"id" json:"id,omitempty"`
  Content string `thrift:"content,2" db:"content" json:"content"`
  // unused fields # 3 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewSaveBlogRequest() *SaveBlogRequest {
  return &SaveBlogRequest{}
}

var SaveBlogRequest_ID_DEFAULT string
func (p *SaveBlogRequest) GetID() string {
  if !p.IsSetID() {
    return SaveBlogRequest_ID_DEFAULT
  }
return *p.ID
}

func (p *SaveBlogRequest) GetContent() string {
  return p.Content
}
var SaveBlogRequest_Base_DEFAULT *base.Base
func (p *SaveBlogRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return SaveBlogRequest_Base_DEFAULT
  }
return p.Base
}
func (p *SaveBlogRequest) IsSetID() bool {
  return p.ID != nil
}

func (p *SaveBlogRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *SaveBlogRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SaveBlogRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *SaveBlogRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *SaveBlogRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *SaveBlogRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveBlogRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SaveBlogRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *SaveBlogRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err) }
  return err
}

func (p *SaveBlogRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *SaveBlogRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SaveBlogRequest(%+v)", *p)
}

// Attributes:
//  - ID
//  - Content
//  - BaseResp
type SaveBlogResponse struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Content string `thrift:"content,2" db:"content" json:"content"`
  // unused fields # 3 to 254
  BaseResp *base.BaseResp `thrift:"baseResp,255" db:"baseResp" json:"baseResp"`
}

func NewSaveBlogResponse() *SaveBlogResponse {
  return &SaveBlogResponse{}
}


func (p *SaveBlogResponse) GetID() string {
  return p.ID
}

func (p *SaveBlogResponse) GetContent() string {
  return p.Content
}
var SaveBlogResponse_BaseResp_DEFAULT *base.BaseResp
func (p *SaveBlogResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return SaveBlogResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *SaveBlogResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *SaveBlogResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SaveBlogResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SaveBlogResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *SaveBlogResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *SaveBlogResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveBlogResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SaveBlogResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *SaveBlogResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err) }
  return err
}

func (p *SaveBlogResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:baseResp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:baseResp: ", p), err) }
  return err
}

func (p *SaveBlogResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SaveBlogResponse(%+v)", *p)
}

// Attributes:
//  - Ids
//  - Base
type DeleteBlogRequest struct {
  Ids []string `thrift:"ids,1" db:"ids" json:"ids"`
  // unused fields # 2 to 254
  Base *base.Base `thrift:"base,255" db:"base" json:"base"`
}

func NewDeleteBlogRequest() *DeleteBlogRequest {
  return &DeleteBlogRequest{}
}


func (p *DeleteBlogRequest) GetIds() []string {
  return p.Ids
}
var DeleteBlogRequest_Base_DEFAULT *base.Base
func (p *DeleteBlogRequest) GetBase() *base.Base {
  if !p.IsSetBase() {
    return DeleteBlogRequest_Base_DEFAULT
  }
return p.Base
}
func (p *DeleteBlogRequest) IsSetBase() bool {
  return p.Base != nil
}

func (p *DeleteBlogRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteBlogRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Ids = append(p.Ids, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DeleteBlogRequest)  ReadField255(iprot thrift.TProtocol) error {
  p.Base = &base.Base{}
  if err := p.Base.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Base), err)
  }
  return nil
}

func (p *DeleteBlogRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteBlogRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteBlogRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err) }
  return err
}

func (p *DeleteBlogRequest) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("base", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:base: ", p), err) }
  if err := p.Base.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Base), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:base: ", p), err) }
  return err
}

func (p *DeleteBlogRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteBlogRequest(%+v)", *p)
}

// Attributes:
//  - Ids
//  - BaseResp
type DeleteBlogResponse struct {
  Ids []string `thrift:"ids,1" db:"ids" json:"ids"`
  // unused fields # 2 to 254
  BaseResp *base.BaseResp `thrift:"baseResp,255" db:"baseResp" json:"baseResp"`
}

func NewDeleteBlogResponse() *DeleteBlogResponse {
  return &DeleteBlogResponse{}
}


func (p *DeleteBlogResponse) GetIds() []string {
  return p.Ids
}
var DeleteBlogResponse_BaseResp_DEFAULT *base.BaseResp
func (p *DeleteBlogResponse) GetBaseResp() *base.BaseResp {
  if !p.IsSetBaseResp() {
    return DeleteBlogResponse_BaseResp_DEFAULT
  }
return p.BaseResp
}
func (p *DeleteBlogResponse) IsSetBaseResp() bool {
  return p.BaseResp != nil
}

func (p *DeleteBlogResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 255:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField255(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteBlogResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Ids = append(p.Ids, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DeleteBlogResponse)  ReadField255(iprot thrift.TProtocol) error {
  p.BaseResp = &base.BaseResp{}
  if err := p.BaseResp.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BaseResp), err)
  }
  return nil
}

func (p *DeleteBlogResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteBlogResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField255(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteBlogResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ids: ", p), err) }
  return err
}

func (p *DeleteBlogResponse) writeField255(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 255); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 255:baseResp: ", p), err) }
  if err := p.BaseResp.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BaseResp), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 255:baseResp: ", p), err) }
  return err
}

func (p *DeleteBlogResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteBlogResponse(%+v)", *p)
}

type BlogService interface {
  // Parameters:
  //  - Request
  GetBlog(ctx context.Context, request *GetBlogRequest) (r *GetBlogResponse, err error)
  // Parameters:
  //  - Request
  ListBlogs(ctx context.Context, request *ListBlogsRequest) (r *ListBlogsResponse, err error)
  // Parameters:
  //  - Request
  SaveBlog(ctx context.Context, request *SaveBlogRequest) (r *SaveBlogResponse, err error)
  // Parameters:
  //  - Request
  DeleteBlogs(ctx context.Context, request *DeleteBlogRequest) (r *DeleteBlogResponse, err error)
}

type BlogServiceClient struct {
  c thrift.TClient
}

func NewBlogServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BlogServiceClient {
  return &BlogServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBlogServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BlogServiceClient {
  return &BlogServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBlogServiceClient(c thrift.TClient) *BlogServiceClient {
  return &BlogServiceClient{
    c: c,
  }
}

func (p *BlogServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Request
func (p *BlogServiceClient) GetBlog(ctx context.Context, request *GetBlogRequest) (r *GetBlogResponse, err error) {
  var _args4 BlogServiceGetBlogArgs
  _args4.Request = request
  var _result5 BlogServiceGetBlogResult
  if err = p.Client_().Call(ctx, "GetBlog", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *BlogServiceClient) ListBlogs(ctx context.Context, request *ListBlogsRequest) (r *ListBlogsResponse, err error) {
  var _args6 BlogServiceListBlogsArgs
  _args6.Request = request
  var _result7 BlogServiceListBlogsResult
  if err = p.Client_().Call(ctx, "ListBlogs", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *BlogServiceClient) SaveBlog(ctx context.Context, request *SaveBlogRequest) (r *SaveBlogResponse, err error) {
  var _args8 BlogServiceSaveBlogArgs
  _args8.Request = request
  var _result9 BlogServiceSaveBlogResult
  if err = p.Client_().Call(ctx, "SaveBlog", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *BlogServiceClient) DeleteBlogs(ctx context.Context, request *DeleteBlogRequest) (r *DeleteBlogResponse, err error) {
  var _args10 BlogServiceDeleteBlogsArgs
  _args10.Request = request
  var _result11 BlogServiceDeleteBlogsResult
  if err = p.Client_().Call(ctx, "DeleteBlogs", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type BlogServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BlogService
}

func (p *BlogServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BlogServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BlogServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBlogServiceProcessor(handler BlogService) *BlogServiceProcessor {

  self12 := &BlogServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["GetBlog"] = &blogServiceProcessorGetBlog{handler:handler}
  self12.processorMap["ListBlogs"] = &blogServiceProcessorListBlogs{handler:handler}
  self12.processorMap["SaveBlog"] = &blogServiceProcessorSaveBlog{handler:handler}
  self12.processorMap["DeleteBlogs"] = &blogServiceProcessorDeleteBlogs{handler:handler}
return self12
}

func (p *BlogServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type blogServiceProcessorGetBlog struct {
  handler BlogService
}

func (p *blogServiceProcessorGetBlog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BlogServiceGetBlogArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetBlog", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BlogServiceGetBlogResult{}
var retval *GetBlogResponse
  var err2 error
  if retval, err2 = p.handler.GetBlog(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBlog: " + err2.Error())
    oprot.WriteMessageBegin("GetBlog", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetBlog", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type blogServiceProcessorListBlogs struct {
  handler BlogService
}

func (p *blogServiceProcessorListBlogs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BlogServiceListBlogsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ListBlogs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BlogServiceListBlogsResult{}
var retval *ListBlogsResponse
  var err2 error
  if retval, err2 = p.handler.ListBlogs(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListBlogs: " + err2.Error())
    oprot.WriteMessageBegin("ListBlogs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ListBlogs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type blogServiceProcessorSaveBlog struct {
  handler BlogService
}

func (p *blogServiceProcessorSaveBlog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BlogServiceSaveBlogArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SaveBlog", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BlogServiceSaveBlogResult{}
var retval *SaveBlogResponse
  var err2 error
  if retval, err2 = p.handler.SaveBlog(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveBlog: " + err2.Error())
    oprot.WriteMessageBegin("SaveBlog", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SaveBlog", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type blogServiceProcessorDeleteBlogs struct {
  handler BlogService
}

func (p *blogServiceProcessorDeleteBlogs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BlogServiceDeleteBlogsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DeleteBlogs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BlogServiceDeleteBlogsResult{}
var retval *DeleteBlogResponse
  var err2 error
  if retval, err2 = p.handler.DeleteBlogs(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteBlogs: " + err2.Error())
    oprot.WriteMessageBegin("DeleteBlogs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("DeleteBlogs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type BlogServiceGetBlogArgs struct {
  Request *GetBlogRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewBlogServiceGetBlogArgs() *BlogServiceGetBlogArgs {
  return &BlogServiceGetBlogArgs{}
}

var BlogServiceGetBlogArgs_Request_DEFAULT *GetBlogRequest
func (p *BlogServiceGetBlogArgs) GetRequest() *GetBlogRequest {
  if !p.IsSetRequest() {
    return BlogServiceGetBlogArgs_Request_DEFAULT
  }
return p.Request
}
func (p *BlogServiceGetBlogArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BlogServiceGetBlogArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceGetBlogArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &GetBlogRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BlogServiceGetBlogArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlog_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceGetBlogArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *BlogServiceGetBlogArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceGetBlogArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlogServiceGetBlogResult struct {
  Success *GetBlogResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBlogServiceGetBlogResult() *BlogServiceGetBlogResult {
  return &BlogServiceGetBlogResult{}
}

var BlogServiceGetBlogResult_Success_DEFAULT *GetBlogResponse
func (p *BlogServiceGetBlogResult) GetSuccess() *GetBlogResponse {
  if !p.IsSetSuccess() {
    return BlogServiceGetBlogResult_Success_DEFAULT
  }
return p.Success
}
func (p *BlogServiceGetBlogResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BlogServiceGetBlogResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceGetBlogResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetBlogResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BlogServiceGetBlogResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBlog_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceGetBlogResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BlogServiceGetBlogResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceGetBlogResult(%+v)", *p)
}

// Attributes:
//  - Request
type BlogServiceListBlogsArgs struct {
  Request *ListBlogsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewBlogServiceListBlogsArgs() *BlogServiceListBlogsArgs {
  return &BlogServiceListBlogsArgs{}
}

var BlogServiceListBlogsArgs_Request_DEFAULT *ListBlogsRequest
func (p *BlogServiceListBlogsArgs) GetRequest() *ListBlogsRequest {
  if !p.IsSetRequest() {
    return BlogServiceListBlogsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *BlogServiceListBlogsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BlogServiceListBlogsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceListBlogsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ListBlogsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BlogServiceListBlogsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListBlogs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceListBlogsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *BlogServiceListBlogsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceListBlogsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlogServiceListBlogsResult struct {
  Success *ListBlogsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBlogServiceListBlogsResult() *BlogServiceListBlogsResult {
  return &BlogServiceListBlogsResult{}
}

var BlogServiceListBlogsResult_Success_DEFAULT *ListBlogsResponse
func (p *BlogServiceListBlogsResult) GetSuccess() *ListBlogsResponse {
  if !p.IsSetSuccess() {
    return BlogServiceListBlogsResult_Success_DEFAULT
  }
return p.Success
}
func (p *BlogServiceListBlogsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BlogServiceListBlogsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceListBlogsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ListBlogsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BlogServiceListBlogsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListBlogs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceListBlogsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BlogServiceListBlogsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceListBlogsResult(%+v)", *p)
}

// Attributes:
//  - Request
type BlogServiceSaveBlogArgs struct {
  Request *SaveBlogRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewBlogServiceSaveBlogArgs() *BlogServiceSaveBlogArgs {
  return &BlogServiceSaveBlogArgs{}
}

var BlogServiceSaveBlogArgs_Request_DEFAULT *SaveBlogRequest
func (p *BlogServiceSaveBlogArgs) GetRequest() *SaveBlogRequest {
  if !p.IsSetRequest() {
    return BlogServiceSaveBlogArgs_Request_DEFAULT
  }
return p.Request
}
func (p *BlogServiceSaveBlogArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BlogServiceSaveBlogArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceSaveBlogArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &SaveBlogRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BlogServiceSaveBlogArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveBlog_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceSaveBlogArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *BlogServiceSaveBlogArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceSaveBlogArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlogServiceSaveBlogResult struct {
  Success *SaveBlogResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBlogServiceSaveBlogResult() *BlogServiceSaveBlogResult {
  return &BlogServiceSaveBlogResult{}
}

var BlogServiceSaveBlogResult_Success_DEFAULT *SaveBlogResponse
func (p *BlogServiceSaveBlogResult) GetSuccess() *SaveBlogResponse {
  if !p.IsSetSuccess() {
    return BlogServiceSaveBlogResult_Success_DEFAULT
  }
return p.Success
}
func (p *BlogServiceSaveBlogResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BlogServiceSaveBlogResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceSaveBlogResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SaveBlogResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BlogServiceSaveBlogResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SaveBlog_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceSaveBlogResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BlogServiceSaveBlogResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceSaveBlogResult(%+v)", *p)
}

// Attributes:
//  - Request
type BlogServiceDeleteBlogsArgs struct {
  Request *DeleteBlogRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewBlogServiceDeleteBlogsArgs() *BlogServiceDeleteBlogsArgs {
  return &BlogServiceDeleteBlogsArgs{}
}

var BlogServiceDeleteBlogsArgs_Request_DEFAULT *DeleteBlogRequest
func (p *BlogServiceDeleteBlogsArgs) GetRequest() *DeleteBlogRequest {
  if !p.IsSetRequest() {
    return BlogServiceDeleteBlogsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *BlogServiceDeleteBlogsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BlogServiceDeleteBlogsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceDeleteBlogsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &DeleteBlogRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BlogServiceDeleteBlogsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteBlogs_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceDeleteBlogsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *BlogServiceDeleteBlogsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceDeleteBlogsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlogServiceDeleteBlogsResult struct {
  Success *DeleteBlogResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBlogServiceDeleteBlogsResult() *BlogServiceDeleteBlogsResult {
  return &BlogServiceDeleteBlogsResult{}
}

var BlogServiceDeleteBlogsResult_Success_DEFAULT *DeleteBlogResponse
func (p *BlogServiceDeleteBlogsResult) GetSuccess() *DeleteBlogResponse {
  if !p.IsSetSuccess() {
    return BlogServiceDeleteBlogsResult_Success_DEFAULT
  }
return p.Success
}
func (p *BlogServiceDeleteBlogsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BlogServiceDeleteBlogsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BlogServiceDeleteBlogsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DeleteBlogResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BlogServiceDeleteBlogsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteBlogs_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BlogServiceDeleteBlogsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BlogServiceDeleteBlogsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BlogServiceDeleteBlogsResult(%+v)", *p)
}


